//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SoteCare.Models
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using System.Web.Mvc;
    using System.ComponentModel.DataAnnotations;

    public class VitalFunctions


    {
        [Display(Name = "Elintoiminto")]
        public int VitalFunctionID { get; set; }
        [Display(Name = "Potilas")]
        public int PatientID { get; set; }
        [Display(Name = "Pvm/Aika")]
        public System.DateTime DateTime { get; set; }
        [Display(Name = "Syke")]
        public Nullable<int> HeartRate { get; set; }
        [Display(Name = "Systolinen Verenpaine")]
        public Nullable<int> SystolicBloodPressure { get; set; }
        [Display(Name = "Diastolinen Verenpaine")]
        public Nullable<int> DiastolicBloodPressure { get; set; }
        [Display(Name = "Hengitystiheys")]
        public Nullable<int> RespiratoryRate { get; set; }

        [Display(Name = "Ruumiinlämpö")]
        public decimal? Temperature { get; set; }

        [Display(Name = "Happisaturaatio")]

        public Nullable<decimal> OxygenSaturation { get; set; }
        [Display(Name = "Hoitaja")]
        public Nullable<int> NurseID { get; set; }

        public virtual Patients Patients { get; set; }
        public virtual Nurses Nurses { get; set; }
    }

    public class DecimalModelBinder : DefaultModelBinder
    {
        public override object BindModel(ControllerContext controllerContext, ModelBindingContext bindingContext)
        {
            var value = bindingContext.ValueProvider.GetValue(bindingContext.ModelName);
            if (value != null)
            {
                var attemptedValue = value.AttemptedValue;

                // Try parsing with invariant culture (dot as separator)
                if (decimal.TryParse(attemptedValue, NumberStyles.Any, CultureInfo.InvariantCulture, out var result))
                {
                    return result;
                }

                // Try parsing with current culture (comma as separator)
                if (decimal.TryParse(attemptedValue, NumberStyles.Any, CultureInfo.CurrentCulture, out result))
                {
                    return result;
                }

                // Add model state error if parsing fails
                bindingContext.ModelState.AddModelError(bindingContext.ModelName, "Invalid temperature format.");
            }

            return null;
        }
    }
}
